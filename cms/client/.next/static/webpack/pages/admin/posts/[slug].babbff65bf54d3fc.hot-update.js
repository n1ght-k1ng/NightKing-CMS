"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/admin/posts/[slug]",{

/***/ "./pages/admin/posts/[slug].js":
/*!*************************************!*\
  !*** ./pages/admin/posts/[slug].js ***!
  \*************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n// import {Button,Row , Col ,Input , Select ,Modal, Image} from \"antd\"\n// import AdminLayout from \"../../../components/layout/adminLayout\";\n// import { useContext ,useEffect } from \"react\";\n// import { Editor } from '@tinymce/tinymce-react';\n// import { useRef , useState } from \"react\";\n// import { ThemeContext } from \"../../../context/theme\";\n// import axios from  'axios';\n// import ToggleTheme from \"../../../components/ToggleTheme\";\n// import Resizer from 'react-image-file-resizer';\n// import { useRouter } from \"next/router\";\n// import toast from 'react-hot-toast'\n// import {UploadOutLined} from \"@ant-design/icons\"\n// import React from \"react\";\n// import Media from \"../../../components/media/index\"\n// import {MediaContext} from \"../../../context/media\"\n// import { loadComponents } from \"next/dist/server/load-components\";\n// // const {Content , Sider} = Layout;\n// const { Option} = Select\n// const ResizeFile = (file) => \n//     new Promise((resolve)=>{\n//         Resizer.imageFileResizer(\n//             file,\n//             7200,\n//             400,\n//             \"JPEG\",\n//             100,\n//             0,\n//             (uri) => {resolve(uri)},\n//             \"base64\",\n//         )\n//     })\n// // const handlePublish = async () => {\n// //     try{\n// //         const { data } = await axios.post(\"/create-post\", {\n// //             title,\n// //             initialValuee,\n// //             categories,\n// //         })\n// //         if(data?.error)\n// //         {\n// //             toast.error(data?.error);\n// //         }\n// //         else{\n// //             console.log(\"POST PUBLISH RESS  =>\", data )\n// //             toast.success(\"Post Created Successfully\");\n// //             localStorage.removeItem(\"post-title\");\n// //             localStorage.removeItem(\"post-content\");\n// //             router.push(\"/admin/post\")\n// //             setCategories([])\n// //         }\n// //     }\n// //     catch(err){   console.log(err) \n// //     toast.error(\"Post Publish Failed\")  }\n// // }\n// // const uploadImage = async (file) => {\n// //     try{\n// //         const image = await ResizeFile(file);\n// //         console.log(\"image b64\" , image);\n// //         const { data }  = await axios.post(\"/upload-image\" , {image})\n// //         console.log(\"Uploaded image: \" + data)\n// //         return data.url\n// //     }\n// //     catch(err) {   console.log(err) }\n// // }\n// function editPost () {\n//     useEffect(() => {\n//         loadPost()\n//     },[router?.query?.slug])\n//     const router = useRouter()\n//     const loadpost = async () => {\n//         try{\n//             // const {data} = await axios.get(`/post/${router.query.slug}`)\n//             console.log(\"GOT POST FOR EDIT\", data)\n//         }\n//         catch(err) { console.log(err) } \n//     }\n//     const handlePublish = async () => {\n//         setLoading(true);\n//         try{\n//             const { data } = await axios.post(\"/create-post\", {\n//                 title,\n//                 text,\n//                 categories,\n//                 featuredImage: media?.selected?._id\n//             })\n//             if(data?.error)\n//             {\n//                 toast.error(data?.error);\n//                 setLoading(false);\n//             }\n//             else{\n//                 console.log(\"POST PUBLISH RESS  =>\", data )\n//                 toast.success(\"Post Created Successfully\");\n//                 localStorage.removeItem(\"post-title\");\n//                 setMedia({...media , selected: \"\"})\n//                 localStorage.removeItem(\"post-content\");\n//                 router.push(\"/admin/posts\")\n//                 setCategories([])\n//                 setLoading(false)\n//             }\n//         }\n//         catch(err){   \n//         console.log(err) \n//         toast.error(\"Post Publish Failed\")\n//         setLoading(false\n//             ) }\n//     }\n//     // load from local storage\n//     const [initialValuee, setInitialValuee] = useState(undefined);\n//     useEffect(() => {\n//         if(process.browser)\n//         {\n//             if(localStorage.getItem('post-content'))\n//             {\n//                  setInitialValuee(JSON.parse(localStorage.getItem('post-content')))\n//             }\n//             else{\n//                 setInitialValuee('<p> Welcome to NightKing-CMS </p>')\n//             }\n//         }\n// },[])\n//     const editorRef = useRef(null);\n//     const log = () => {\n//       if (editorRef.current) {\n//         console.log(editorRef.current.getContent());\n//       }\n//     };\n//     const [ theme, setTheme] = useContext(ThemeContext)\n// const initialText = 'Welcome to NightKing-CMS';\n// const [media , setMedia] = useContext(MediaContext)\n// const [text, setText] = useState('');\n// const [title , setTitle] = useState('');\n// const [ categories, setCategories] = useState([]);\n// const [loadedCategories, setLoadedCategories] = useState([]);\n// const [visible, setVisible] = useState(false);\n// const [ModalVisible , setModalVisible] = useState(false);\n// const [loading, setLoading] = useState(false);\n// useEffect(()=>{\n//     loadCategories()\n// },[])\n// const loadCategories = async () =>{\n//     try{\n//     const { data } = await axios.get('/categories');\n//     setLoadedCategories(data);\n//     }\n//     catch(err){   console.log(err); }\n// }\n//     return(\n//         <AdminLayout>\n//         <Row>\n//             <Col span ={14} offset= {1}>\n//             <h1> Edit post</h1>\n//             <br/>\n//             <Input value = {title}\n//             placeholder = \"Give you Post a Title\"\n//             onChange={e => {\n//                 setTitle(e.target.value);\n//                 localStorage.setItem('post-title', JSON.stringify(e.target.value))\n//             }}/>\n//             <br/><br/><br/>\n//             <Editor\n//         //  onInit={(evt, editor) =>{ \n//         //     editorRef.current = editor\n//         // }}\n//          apiKey = \"g7wekghh9n4a5vw9pjog2yglr9kgert1sy9zlxcxvnyj0o9n\"\n//          init={{\n//             selector: 'textarea',  \n//             skin: `oxide-dark`,\n//             content_css: 'dark',\n//             menubar:true ,\n//         //    height: 500,\n//         //    width: 1000,\n//            plugins: [\n//              'advlist', 'autolink', 'lists', 'link' ,'image', 'charmap','preview', 'anchor',\n//              'searchreplace', 'visualblocks', 'code' ,'fullscreen',\n//              'insertdatetime' ,'media' ,'table', 'code' ,'help' ,'wordcount'\n//            ],\n//            toolbar: 'undo redo | link image | code | formatselect | ' +\n//            'bold italic backcolor | alignleft aligncenter ' +\n//            'alignright alignjustify | bullist numlist outdent indent | ' + \n//            'removeformat | help',\n//            content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:14px }',\n//            file_picker_types: \"file image media\",\n//         //    images_upload_url: `${uploadImage()}`,\n//         //    automatic_uploads: true,\n//            block_unsupported_drop: false,\n//         //    file_picker_callback: (callback, value, meta) => {\n//         //     // Provide file and text for the link dialog\n//         //     if (meta.filetype == 'file') {\n//         //       callback('mypage.html', { text: 'My text' });\n//         //     }\n//         //     // Provide image and alt text for the image dialog\n//         //     if (meta.filetype == 'image') {\n//         //       callback('myimage.jpg', { alt: 'My alt text' });\n//         //     }\n//         //     // Provide alternative source and posted for the media dialog\n//         //     if (meta.filetype == 'media') {\n//         //       callback('movie.mp4', { source2: 'alt.ogg', poster: 'image.jpg' });\n//         //     }\n//         //   }\n//              }}\n//         initialValue={initialValuee}\n//          onEditorChange={(newText) => {\n//             setText(newText)\n//             localStorage.setItem('post-content' , JSON.stringify(newText))\n//          }}\n//         //  onInit={\n//         //     initialValue={initialValuee}\n//         //  }\n//        />\n//             </Col>\n//             <Col span={6} offset = {1}>\n//                 <Button style={{margin: \"10px 0px 10px 0px\", width: \"100%\"}} onClick={()=> setVisible(true)}> Preview\n//                 </Button>\n//                 <h4> Categories </h4>\n//                 <Select\n//                 mode = 'multiple'\n//                 allowClear ={true}\n//                 placeholder = 'Select Categories'\n//                 style={{width: \"100%\"}}\n//                 onChange={(v) => setCategories(v)}\n//                 >\n//                     {loadedCategories.map((item) => <Option key= {item.name}>{item.name}</Option>)}\n//                 </Select>\n//                 <br/>\n//                 <br/>\n//                 {media?.selected && (\n//                     <Image width = '100%' src= {media?.selected?.url}/>\n//                 )}\n//                 <Button style={{margin: \"10px 0px 10px 0px\", width: \"100%\"}} onClick = {() => setMedia({...media , showMediaModal: true})}  >\n//                      Featured Image\n//                 </Button>\n//             <Modal title=\"Media\"\n//             visible={media.showMediaModal}\n//             onOk={() => setMedia({...media, showMediaModal: false})}\n//             onCancel={() => setMedia({...media, showMediaModal: false})}\n//             footer = {null}\n//             width ={720}\n//             >\n//                 <Media/>\n//             </Modal>\n//                 <Button style={{margin: \"10px 0px 10px 0px\", width: \"100%\"}} type = \"primary\" loading = {loading} onClick={handlePublish}> Publish\n//                 </Button>\n//             </Col>\n//             <Modal title=\"Preview\"\n//             centered\n//             visible={visible}\n//             onOk={() => setVisible(false)}\n//             onCancel={() => setVisible(false)}\n//             footer = {null}\n//             width ={720}\n//             >\n//                 <h1> {title} </h1>\n//                 <Editor\n//             init={{\n//             selector: 'textarea',  \n//             skin: `oxide-dark`,\n//             content_css: 'dark',\n//             menubar:false,\n//             readonly: true,\n//             }}\n//             toolbar = \"false\"\n//             initialValue = {text}\n//             >\n//                 </Editor>\n//             </Modal>\n//         </Row>\n//         </AdminLayout>\n//     )\n// }\n/* harmony default export */ __webpack_exports__[\"default\"] = (editPost);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevExports = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevExports) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports on update so we can compare the boundary\n                // signatures.\n                module.hot.dispose(function (data) {\n                    data.prevExports = currentExports;\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevExports !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevExports, currentExports)) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevExports !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./pages/admin/posts/[slug].js\n"));

/***/ })

});